@model Contract.Responses.PlayResponse


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(model => model.Dialogue.Id)
        @Html.HiddenFor(model => model.Setting.IdNowPlay)

        <div class="form-group">
            @Html.Label("Wybrany aktor:", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Setting.SelectActor, new SelectList(Model.Dialogue.Actors, "Id", "Name"), "Wybierz aktora", new { @class = "btn btn-primary dropdown-toggle" })
                @Html.ValidationMessageFor(model => model.Setting.SelectActor, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Pokaż mój tekst:", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Setting.VisableMyText)
                @Html.ValidationMessageFor(model => model.Setting.VisableMyText, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Pokaż pozostały tekst", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Setting.VisableOtherText)
                @Html.ValidationMessageFor(model => model.Setting.VisableOtherText, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
